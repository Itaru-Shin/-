今天开始学习哈希表
哈希表的定义：Hash table
哈希表是根据关键码的值而直接进行访问的数据结构（官方解释）
数组就是一张哈希表，关键码就是数组的下标，然后通过下标直接访问数组中的元素

哈希表解决的问题：快速判断一个元素是否出现在集合里

哈希函数：如何将一段特定的字符或者其他的东西（例如人名等），转化为哈希表中的索引数字，这个过程就是哈希函数。
文中提到的一个： hashFunction=hashCode(name) % tablesize， 这就可以将其他的东西转化为索引了（映射）

如果数量大于哈希表的大小，避免不了会被同时映射到同一个索引下，那么就需要引出 哈希碰撞

哈希碰撞：
小王小李都被映射到了索引下标为1的位置
解决办法：拉链法，线性探测法

拉链法：将小王和小李都存在索引1中，索引1对应的位置成了一个链表
选择适当的哈希表的大小，这样既不会因为数组空值而浪费大量内存，也不会因为链表太长而在查找上浪费太多时间

线性探测法：
要保证哈希表的大小大于数据大小，依靠哈希表中的空位来解决碰撞问题
如果放了小李，那么就向下找一个空位放小王的信息

常见的三种哈希结构：
数组，集合set，映射map

C++下面的三种set：
set：红黑树，有序，不可重复，不可更改
multiset：红黑树，有序，可以重复，不可更改
unordered_set：哈希表，无序，不可重复，不可更改

三种map：
map：红黑树，有序，不可重复，不可更改
multimap：红黑树，有序，可以重复，不可更改
unordered_map：哈希表，无序，不可重复，不可更改

使用情景：当要使用集合解决哈希问题的时候，优先使用unordered_set，因为查询和增删效率是最优的。如果需要集合是有序的，就用set；如果不仅有序还要有重复数据，就用multiset

注意的一点：判断一个元素是否存在过，用哈希法

Leetcode：
242 Valid Anagram
  Anagram指的是回文重组词，比如listen和slient，数量和字母是一样的
  数组就是简单的哈希表

  解题的关键在于，如何确定关键值，然后如何完成映射。这道题的关键值就是英文字母，然后声明一个大小为26的数组，就可以和字母一一对应。值就是字母出现的顺序。
  关键的一点在于，不需要在意顺序！

  题解中有ord()这个函数，是ordinal的缩写，表示次序，可以理解为返回一个字符在unicode中的次序。
  与之相对应的函数为chr（）

349 Intersection of Two arrays
用数组做哈希表的缺点：
  一般的映射都是考虑将关键值映射为数组的索引，因此在关键值比较少，特别分散，跨度特别大的时候，数组就会造成空间的极大浪费
  此时可以考虑使用set这种结构体
  对应的python，就是使用字典这种结构体，他是一种键值对的结构体，声明的时候用{}进行。具体可以询问chatGPT
  table[num] = table.get(num, 0) + 1
  这句代码需要理解：获取num这个键对应的值，如果不存在，则设置为0（其实感觉这里面不需要+1，因为有这个值就行了）
  其实这道题可以用set来进行存储nums1，他会自动剔除所有的重复数据

202 Happy Number
  这道题竟然是简单，我第一时间没想好解题思路
  这道题一开始我读题的时候理解有问题，我以为可以无限循环的也是happu number，实则不然，只有最后变成1的才是快乐数
  这里面用到了集合来检查中间结果是否出现过，如果出现过，那么直接返回False

  还有一个比较tricky的点就是，如何得到各个位数上的平方，并求和
  这里面用到了n, r = divmod(n, 10)，直接返回商和余数（python还是方便啊）
  判断n是否为0就知道运算结束了没有，很聪明的一点

1. Two Sum
  作为Leetcode的第一道题，还是很有代表性的
  这道题一眼看上去就有直接的暴力解法
  set：可以看做只存放了key
  这道题是需要返回下标的，因此需要存储key和value，因此需要用到map
  要选择什么作为key：其实当要判断什么东西出现过的时候，什么用来当作key就好了

  为什么用哈希表更快？：
  因此这里面将原来的数组转化成了map，然后map的查询速度很快，并且可以直接返回元素对应的下标值（即value），因此可以得到加速
  由此可以看出，涉及到数组的询问的话，可以考虑使用哈希表来进行加速

  python真的是很方便的语言，可以实现一些c++需要一些操作才能实现的方法：
  for index, value in enumerate(nums): 
  enumerate这个函数可以返回一个迭代器，返回的事（index, value)这样的一个元组（对于数组而言）

  另外需要注意的一点就是，这道题的迭代顺序，他是定位一个元素，然后从后往前找是否存在满足要求的答案。这跟我习以为常的从前往后找的习惯不一样，以后是需要注意的
