两天没刷题了，赶紧回来补补进度
226. Invert binary tree
这道题看起来是挺简单的，root不变，其他的左右两个child对调
问题在于遍历的顺序
递归法：
1. 确定递归函数的参数和返回值
参数就是要传入节点的指针，不需要返回值
2. 确定终止条件
当前节点为空的时候，就返回
3. 确定单层递归的逻辑（本质上是前序遍历）
先交换当前节点的左右孩子节点
然后反转左子树
然后反转右子树

101. Symmetric Tree
递归法：
这里面需要理清楚自己的思路，是要比较的是左右两个子树是否对称，而不是子节点，这样的话就可以用递归法了。
可以认为是后序遍历，一个树的遍历是左右中，另一个是右左中

递归法：
1. 确定递归函数的参数和返回值
返回值是bool，两个参数是两个树
2. 确定终止条件：
节点为空：
  左空，右不空，false
  左不空，右空，false
  左右都空，true
节点不为空
  相等，true else false
3. 确定单层递归的逻辑
  比较外侧节点是否对称：传入左节点的左孩子，右节点的右孩子
  比较内节点是否对称：出入左节点的右孩子，右节点的左孩子

清楚地了解了递归的逻辑是比较好的
