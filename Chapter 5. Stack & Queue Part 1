栈与队列的理论基础
队列：先进先出
栈：先进后出
1. stack 是容器吗？
stack 在 C++ 中并不是一种独立的容器，而是一个容器适配器（container adapter）。容器适配器是在其他底层容器的基础上构建的，它提供了一组专门的接口来满足某种特定的数据结构或算法需求。stack 的底层容器可以是 deque（默认）、vector 或 list。
4. stack 提供迭代器来遍历 stack 空间吗？
不提供。由于 stack 是一种后进先出（LIFO, Last In First Out）的数据结构，它仅允许访问栈顶元素并进行压栈和弹栈操作，因此 stack 不支持迭代器来遍历其元素。stack 设计的初衷是为了限制访问，仅能通过 top 访问栈顶元素，而不允许遍历内部数据。
如果你需要遍历 stack 中的元素，可以考虑在使用 stack 之前将其底层容器（如 deque 或 vector）直接暴露出来，然后在该容器上使用迭代器进行遍历。

栈是以底层容器完成所有工作的，对外提供统一的接口，底层容器是可插拔的（也就是说我们可以控制使用哪种容器来实现栈的功能）

deque（双端队列，double-ended queue）是一种在 C++ 标准模板库（STL）中提供的序列容器，它允许在序列的两端（前端和后端）进行高效的插入和删除操作。

deque 的特点
双端操作：与 vector 不同，deque 支持在序列的两端进行插入和删除操作。这意味着你可以在 deque 的前端使用 push_front 和 pop_front，在后端使用 push_back 和 pop_back，而这些操作的时间复杂度都是 O(1)。

随机访问：deque 允许随机访问元素，类似于数组或 vector，你可以通过下标访问 deque 中的元素，时间复杂度为 O(1)。

动态大小：与 vector 类似，deque 的大小是动态调整的，当需要增加或减少容量时，deque 会自动调整其大小以适应新元素的插入或删除。

不连续存储：与 vector 不同，deque 的内部实现并不是将所有元素存储在一个连续的内存块中，而是使用一组连续的小块内存来存储元素。这种实现方式使得 deque 能够高效地进行前端的插入和删除操作，同时也能高效地进行随机访问。

Leetcode题目：
