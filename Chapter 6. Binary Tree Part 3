二叉树的高度和深度：
节点的深度：从根节点到该节点所经历的边的数量
节点的高度：该节点到叶子结点的最长路径的边的数量（叶子必须是自己的子树上的）
leetcode上面定义的root的深度为1（跟别的地方定义的不一样）

110 Balanced binary Tree 平衡二叉树
平衡二叉树的定义：一个二叉树每个节点的左右两个子树的高度差绝对值不超过1
递归法：
1. 明确递归函数的参数和返回值
参数：传入当前节点
返回值：以当前传入节点为根节点的树的高度
2. 明确终止条件
遇到空节点终止，返回0，表示当前节点为根节点的高度为0
3. 明确单层递归的逻辑
分别求出其左右子树的高度，如果差值小于等于1，返回当前二叉树的高度，否则返回-1

python中海象操作符的应用：
:=  可以直接在判断语句中赋值。起的名字是因为他的形状

257. binary tree paths二叉树的所有路径
看样子就是深度搜索。这里面用了一个专业的术语，叫做回溯
回溯和递归是一家！
回溯和递归要永远在一起！

1. 递归函数参数和返回值
参数：要传入根节点，要记录每一条路径path，还要传入存放结果集的result
2. 确定递归终止条件
找到叶子结点，进行结束的处理逻辑
cur不为空，其左右孩子都为空的时候，找到叶子结点
3. 确定单层递归逻辑
直接看代码吧
这里面要重点理解回溯的概念，pop（）是为了回溯，返回到进入递归之前的状态中。
map函数：对arg1中的各个元素，执行arg0这个函数。可以少写一个循环了

404 Sum of Left leaves左叶子之和
通过当前节点是无法判断是不是左叶子的，需要其父节点的参与
1. 递归函数的参数和返回值
传入根节点，返回值为数值之和
2. 终止条件
3. 单层逻辑
判断是不是左叶子，是的话记录
左树的左叶子和
右树的左叶子和
中=左子树+右子树
所以是后序遍历

222. Count Complete Tree Nodes
1. 函数的参数和返回值：传入根节点，返回以该节点为根节点的二叉树的节点数量
2. 终止条件：空节点返回0
3. 单层逻辑：先求左树节点数量，然后右树节点数量，然后求和+1
