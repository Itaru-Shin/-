491 Non-decreasing Subsequences递增子序列
不能够改变原有元素的先后顺序的
首先是回溯三部曲：
很明显一个元素无法重复使用，所以需要startindex
终止条件：这里面也不需要明确的终止条件，但是需要加上size>1的时候要加入path中

单层逻辑：跟之前的题差距不大

46 Permutations 排列

排列问题不再需要startIndex，但是需要一个used数组，来记录已经使用过的元素

整体的思路比较简单

47 Permutations 2    全排列2
跟上一题比起来，多了重复元素
去重的话，可以的话先排列元素

这里有一点是特殊的，就是在树层上去重和在树枝上去重是一样的效果，这是排序问题带来的便利

这里还是去重的逻辑一定要注意，当前元素也是要判断是否使用过的

332. Reconstruct itinerary 重新规划行程
一道难题

tickets.sort(key=lambda x:x[1])
代码解释：sort是排序，key是排序的依据函数，lambda是匿名函数，参数是x，这里的意思是说每一个ticket中的列表，返回值是x[1]，也就是每一个元素列表的第二个元素

题要做的话确实不容易，里面涉及到的细节比较多。但是整体的思路还是相对清楚的

51 N-Queens N皇后
这道题不明白，什么叫做皇后之间不能攻击。
懂了， 同一行，同一列，同一斜线里面，不能出现两个皇后

如何回溯去搜一个二维棋盘

第一个树层取第一行的不同位置，第二个树层取第二行的不同位置

英文表达：row是行，col是列

思路还行，不算特别难理解

37. Sudoku Solver解数独
这个题的变化的点就在于，需要二维地填写数字了，N皇后是一行只填写一个Q

剩下的还好了，思路也挺清晰的
